import os
import psycopg2
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    SELECTING_SERVICE, SELECTING_TIME, GETTING_CONTACT,
    GETTING_LOCATION, CONFIRMING_ORDER, MANUAL_ADDRESS
) = range(6)

# –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
order_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏
services_keyboard = [
    ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞"],
    ["–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–ú—ã—Ç—å—ë –æ–∫–æ–Ω"],
    ["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
time_keyboard = [
    ["–£—Ç—Ä–æ (9:00-12:00)", "–î–µ–Ω—å (12:00-15:00)"],
    ["–í–µ—á–µ—Ä (15:00-18:00)", "–õ—é–±–æ–µ –≤—Ä–µ–º—è"],
    ["–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
contact_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)],
        ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥"],
        ["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
location_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True) ,"–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"],
        ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥"],
        ["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
    ],
    resize_keyboard=True
)


# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
def create_address_confirmation_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_address"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_address")
        ]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
    ["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ —É–±–æ—Ä–∫–∏.\n"
        "–ù–∞–∂–º–∏ /order —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
    /order - –∑–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /order –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!
    """
    await update.message.reply_text(help_text)


# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(services_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=reply_markup
    )
    return SELECTING_SERVICE


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
async def select_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service = update.message.text
    if service == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /order",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    order_data['service'] = service
    reply_markup = ReplyKeyboardMarkup(time_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup
    )
    return SELECTING_TIME


# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text
    if time == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /order",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    elif time == "–ù–∞–∑–∞–¥":
        reply_markup = ReplyKeyboardMarkup(services_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
            reply_markup=reply_markup
        )
        return SELECTING_SERVICE

    order_data['time'] = time
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=contact_keyboard
    )
    return GETTING_CONTACT


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        order_data['phone'] = update.message.contact.phone_number
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:",
            reply_markup=location_keyboard
        )
        return GETTING_LOCATION
    elif update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥":
        order_data['phone'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:",
            reply_markup=location_keyboard
        )
        return GETTING_LOCATION
    elif update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        return await cancel(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
            reply_markup=contact_keyboard
        )
        return GETTING_CONTACT


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        order_data['location'] = {
            'type': 'coordinates',
            'latitude': update.message.location.latitude,
            'longitude': update.message.location.longitude
        }
        await update.message.reply_text(
            "–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await confirm_order_step(update, context)
    elif update.message.text == "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]], resize_keyboard=True)
        )
        return MANUAL_ADDRESS
    elif update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥":
        order_data['location'] = {'type': '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return await confirm_order_step(update, context)
    elif update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        return await cancel(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞.",
            reply_markup=location_keyboard
        )
        return GETTING_LOCATION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
async def manual_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        return await cancel(update, context)

    address = update.message.text
    order_data['location'] = {
        'type': 'address',
        'address': address
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.user_data['manual_address'] = address

    await update.message.reply_text(
        f"–í—ã –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å:\n{address}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=create_address_confirmation_keyboard()
    )
    return CONFIRMING_ORDER


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
async def handle_address_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_address":
        await query.edit_message_text("–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        return await confirm_order_step_from_query(query, context)
    elif query.data == "change_address":
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:")
        return MANUAL_ADDRESS


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∏–∑ –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å–∞)
async def confirm_order_step_from_query(query, context):
    await query.message.reply_text(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
    )
    return await show_order_details(query.message, context)


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def confirm_order_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
    )
    return await show_order_details(update.message, context)


# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
async def show_order_details(message, context):
    order_details = "–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n"
    order_details += f"–£—Å–ª—É–≥–∞: {order_data.get('service', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    order_details += f"–í—Ä–µ–º—è: {order_data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    order_details += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"

    location = order_data.get('location', {})
    if location.get('type') == 'coordinates':
        order_details += "–ê–¥—Ä–µ—Å: —É–∫–∞–∑–∞–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
        await message.reply_location(
            latitude=location['latitude'],
            longitude=location['longitude']
        )
    elif location.get('type') == 'address':
        order_details += f"–ê–¥—Ä–µ—Å: {location.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    else:
        order_details += "–ê–¥—Ä–µ—Å: –Ω–µ —É–∫–∞–∑–∞–Ω\n"

    order_details += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    await message.reply_text(order_details)
    return CONFIRMING_ORDER


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        return await cancel(update, context)
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        reply_markup = ReplyKeyboardMarkup(services_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
            reply_markup=reply_markup
        )
        return SELECTING_SERVICE
    elif choice == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: #12345\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ /order",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /order",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def get_db_connection():
    return psycopg2.connect(
        host="postgres",  # –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
        database=os.getenv('POSTGRES_DB'),
        user=os.getenv('POSTGRES_USER'),
        password=os.getenv('POSTGRES_PASSWORD')
    )

def main():
    #–ø–æ–¥–∫–ª—é—á–∞–µ–º –±–¥
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        print("PostgreSQL version:", cursor.fetchone())
    finally:
        if conn:
            conn.close()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('order', order)],
        states={
            SELECTING_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_service)],
            SELECTING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_time)],
            GETTING_CONTACT: [
                MessageHandler(filters.CONTACT, get_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)
            ],
            GETTING_LOCATION: [
                MessageHandler(filters.LOCATION, get_location),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)
            ],
            MANUAL_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_address)],
            CONFIRMING_ORDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order),
                CallbackQueryHandler(handle_address_confirmation)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
#7561126039:Z5ztc28lD8AimtLJGx9I2wLpTm1


if __name__ == "__main__":
    main()
